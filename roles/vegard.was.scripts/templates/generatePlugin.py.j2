'''
    Author:         Christoph Stoettner
    Mail:           stoeps@vegardit.com
    Copyright:      2020 Vegard IT GmbH
    Description:    Generate and populate Webserver plugin

'''
'''
# From https://www.ibm.com/support/knowledgecenter/en/SSAW57_9.0.5/com.ibm.websphere.nd.multiplatform.doc/ae/txml_pluginconfig.html
generator = AdminControl.completeObjectName('type=PluginCfgGenerator,*')
AdminControl.invoke(generator, 'generate', "profile_root/config mycell myWebServerNode myWebServerName true true")



AdminControl.invoke('WebSphere:name=WebServer,process=dmgr,platform=common,node=CnxCell-dmgr,version=8.5.5.16,type=WebServer,mbeanIdentifier=WebServer,cell=CnxCell,spec=1.0', 'ping', '[CnxCell webNode01 cnx-webserver1]')
AdminControl.invoke('WebSphere:name=PluginCfgGenerator,process=dmgr,platform=common,node=CnxCell-dmgr,version=8.5.5.16,type=PluginCfgGenerator,mbeanIdentifier=PluginCfgGenerator,cell=CnxCell,spec=1.0', 'generate', '[/opt/HCL/WebSphere/AppServer/profiles/Dmgr01/config CnxCell webNode01 cnx-webserver1 false]')


AdminControl.invoke('WebSphere:name=WebServer,process=dmgr,platform=common,node=CnxCell-dmgr,version=8.5.5.16,type=WebServer,mbeanIdentifier=WebServer,cell=CnxCell,spec=1.0', 'ping', '[CnxCell webNode02 cnx-webserver2]')
AdminControl.invoke('WebSphere:name=PluginCfgGenerator,process=dmgr,platform=common,node=CnxCell-dmgr,version=8.5.5.16,type=PluginCfgGenerator,mbeanIdentifier=PluginCfgGenerator,cell=CnxCell,spec=1.0', 'generate', '[/opt/HCL/WebSphere/AppServer/profiles/Dmgr01/config CnxCell webNode02 cnx-webserver2 false]') 
'''

class WasServers:

    def __init__(self):
        # Get a list of all servers in WAS cell (dmgr, nodeagents, AppServer,
        # webserver)
        self.AllServers = self.getAllServers()
        self.WebServers = self.getWebServers()
        self.AppServers = self.getAllServersWithoutWeb()
        # self.serverNum, self.jvm, self.cell, self.node, self.serverName = self.getAttrServers()
        self.serverNum, self.jvm, self.cell, self.node, self.serverName = self.getAttrServers()

    def getAllServers(self):
        # get a list of all servers
        self.servers = AdminTask.listServers().splitlines()
        return self.servers

    def getAppServers(self):
        # get a list of all application servers
        # includes webserver, but no dmgr and nodeagents
        self.servers = AdminTask.listServers(
            '[-serverType APPLICATION_SERVER]').splitlines()
        return self.servers

    def getWebServers(self):
        # get a list of all webservers
        self.webservers = AdminTask.listServers(
            '[-serverType WEB_SERVER]').splitlines()
        return self.webservers

    def getAllServersWithoutWeb(self):
        # inclusive dmgr and nodeagents
        self.AppServers = self.AllServers
        for webserver in self.WebServers:
            self.AppServers.remove(webserver)
        return self.AppServers

    def getAttrServers(self):
        # get jvm, node, cell from single application server
        srvNum = 0
        jvm = []
        cell = []
        node = []
        servername = []
        for server in self.AppServers:
            srvNum += 1
            javavm = AdminConfig.list('JavaVirtualMachine', server)
            jvm.append(javavm)
            srv = server.split('/')
            cell.append(srv[1])
            node.append(srv[3])
            servername.append(srv[5].split('|')[0])
        self.jvm = jvm
        cell = cell
        node = node
        servername = servername
        # return ( serverNum, jvm, cell, node, serverName )
        return (srvNum, self.jvm, cell, node, servername)

WS1 = WasServers()

def generatePlugin():
    webservers = AdminTask.listServers('[-serverType WEB_SERVER]').splitlines()
    for server in webservers:
        srv = server.split('/')
        generator = AdminControl.completeObjectName('type=PluginCfgGenerator,*')
        # Generate Plugin
        AdminControl.invoke(generator, 'generate', '[{{ __was_root_path }}/profiles/{{ __dmgrprfname }}/config ' + srv[1] + ' ' + srv[3] + ' ' + srv[5].split('|')[0] + ' false]') 
        # Propagate Plugin
        AdminControl.invoke(generator, 'propagate', '[{{ __was_root_path }}/profiles/{{ __dmgrprfname }}/config ' + srv[1] + ' ' + srv[3] + ' ' + srv[5].split('|')[0] + ' o]') 
        # Copy Keystore to Plugin
        AdminControl.invoke(generator, 'propagateKeyring', '[{{ __was_root_path }}/profiles/{{ __dmgrprfname }}/config ' + srv[1] + ' ' + srv[3] + ' ' + srv[5].split('|')[0] + ']')  
        
        webgen = AdminControl.completeObjectName('type=WebServer,*')
        # Stop Webserver
        AdminControl.invoke(webgen, 'stop', '[' + srv[1] + ' ' + srv[3] + ' ' + srv[5].split('|')[0] + ']') 
        # Start Webserver
        AdminControl.invoke(webgen, 'start', '[' + srv[1] + ' ' + srv[3] + ' ' + srv[5].split('|')[0] + ']') 

generatePlugin()

if (AdminConfig.hasChanges()):
    print('Changed')
    AdminConfig.save()