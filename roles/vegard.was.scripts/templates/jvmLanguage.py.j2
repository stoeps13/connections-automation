'''
Classes to work with WebSphere Application Servers
Author:        Christoph Stoettner
Mail:          christoph.stoettner@stoeps.de
Documentation: http://scripting101.stoeps.de
Version:       5.0.1
Date:          09/19/2015
License:       Apache 2.0
'''

class WasServers:

    def __init__(self):
        # Get a list of all servers in WAS cell (dmgr, nodeagents, AppServer,
        # webserver)
        self.AllServers = self.getAllServers()
        self.WebServers = self.getWebServers()
        self.AppServers = self.getAllServersWithoutWeb()
        # self.serverNum, self.jvm, self.cell, self.node, self.serverName = self.getAttrServers()
        self.serverNum, self.jvm, self.cell, self.node, self.serverName = self.getAttrServers()

    def getAllServers(self):
        # get a list of all servers
        self.servers = AdminTask.listServers().splitlines()
        return self.servers

    def getAppServers(self):
        # get a list of all application servers
        # includes webserver, but no dmgr and nodeagents
        self.servers = AdminTask.listServers(
            '[-serverType APPLICATION_SERVER]').splitlines()
        return self.servers

    def getWebServers(self):
        # get a list of all webservers
        self.webservers = AdminTask.listServers(
            '[-serverType WEB_SERVER]').splitlines()
        return self.webservers

    def getAllServersWithoutWeb(self):
        # inclusive dmgr and nodeagents
        self.AppServers = self.AllServers
        for webserver in self.WebServers:
            self.AppServers.remove(webserver)
        return self.AppServers

    def getAttrServers(self):
        # get jvm, node, cell from single application server
        srvNum = 0
        jvm = []
        cell = []
        node = []
        servername = []
        for server in self.AppServers:
            srvNum += 1
            javavm = AdminConfig.list('JavaVirtualMachine', server)
            jvm.append(javavm)
            srv = server.split('/')
            cell.append(srv[1])
            node.append(srv[3])
            servername.append(srv[5].split('|')[0])
        self.jvm = jvm
        cell = cell
        node = node
        servername = servername
        # return ( serverNum, jvm, cell, node, serverName )
        return (srvNum, self.jvm, cell, node, servername)

property = '-Duser.language=en -Duser.region=US'

WS1 = WasServers()

def addProperties(server):
    jvm = AdminConfig.list('JavaVirtualMachine', server)
    currentJVMProps = AdminConfig.list("Property", jvm).splitlines()
    for prop in currentJVMProps:
        if property == AdminConfig.showAttribute(prop, "name"):
            AdminConfig.remove(prop)
    AdminConfig.modify(jvm, [['genericJvmArguments', attr]])

for count in range(WS1.serverNum):
    argStr = ''
    jvm = WS1.jvm[count]
    cell = WS1.cell[count]
    node = WS1.node[count]
    servername = WS1.serverName[count]

    jvmArgs = AdminTask.showJVMProperties(
        ['-serverName', servername, '-nodeName', node, '-propertyName', 'genericJvmArguments'])
    jvmArgs = jvmArgs.replace('  ', ' ').replace(
        '  ', ' ').lstrip().rstrip().split(' ')
    tmpArgs = []
    for arg in jvmArgs:
        if (arg != ''):
            if (arg.find('-Duser.language') >= 0) or (arg.find('-Duser.region') >= 0):
                continue
            else:
                tmpArgs.append(arg)
    for i in range(len(tmpArgs)):
        argStr = argStr + tmpArgs[i] + ' '
    newJvmArgs = argStr + property
    print "Adding " + property + " to " + servername
    AdminTask.setGenericJVMArguments(
        "[-nodeName " + node + " -serverName " + servername + " -genericJvmArguments '" + newJvmArgs + "']")

if (AdminConfig.hasChanges()):
    print('Changed')
    AdminConfig.save()