- name: "Get home dir of {{ __kubectl_user }}"
  ansible.builtin.shell: "echo ~{{ __kubectl_user }}"
  register: kubectl_user_home_var
  changed_when: false

- name: "Save home dir of {{ __kubectl_user }}"
  ansible.builtin.set_fact:
    __kubectl_user_home: "{{ kubectl_user_home_var.stdout }}"

- name: Create .kube folder
  ansible.builtin.file:
    path: "{{ __kubectl_user_home }}/.kube"
    owner: "{{ __kubectl_user }}"
    mode: '0700'

- name: Setting up kubectl for the list of users
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ __kubectl_user_home }}/.kube/config"
    mode: '0600'
    owner: "{{ __kubectl_user }}"
    remote_src: true
  when: inventory_hostname == groups['k8s_masters'][0]

- name: Copy .kube to controller
  ansible.posix.synchronize:
    src: "/tmp/.kube_{{ groups['k8s_masters'][0] }}"
    dest: "{{ __kubectl_user_home }}/.kube"
    mode: push
  when: inventory_hostname == groups['k8s_masters'][0]

- name: Copy .kube to all hosts
  ansible.builtin.copy:
    src: "/tmp/.kube_{{ groups['k8s_masters'][0] }}"
    dest: /tmp/
    mode: '0640'
  when: inventory_hostname != groups['k8s_masters'][0]
  become: false

- name: "Copy .kube to {{ __kubectl_user }}"
  ansible.builtin.copy:
    src: "/tmp/.kube_{{ groups['k8s_masters'][0] }}/"
    dest: "{{ __kubectl_user_home }}/"
    mode: '0600'
    remote_src: true
  when: inventory_hostname != groups['k8s_masters'][0]

- name: Cleanup .kube on controller
  local_action:
    module: file
    state: absent
    path: "/tmp/.kube_{{ groups['k8s_masters'][0] }}"
  become: false
  ignore_errors: yes

- name: Cleanup .kube on /tmp
  file:
    state: absent
    path: "/tmp/.kube_{{ groups['k8s_masters'][0] }}"
  become: false
  ignore_errors: yes

- name: "Get home dir of root (pool server)"
  set_fact:
    root_home: "{{ lookup('env','HOME') }}"
  become: true
  when: pool_server is defined

- name: Setting up kubectl for root (pool server)
  command: "{{ item }}"
  with_items:
   - mkdir -p {{ root_home }}/.kube
   - cp -rf /etc/kubernetes/admin.conf {{ root_home }}/.kube/config
   - chown {{ __kubectl_user }} {{ root_home }}/.kube/config
  when: pool_server is defined

- name: Restart containerd and kubelet
  systemd:
    name: "{{ item }}"
    state: restarted
  with_items:
    - containerd
    - kubelet
  ignore_errrs: yes
